# -*- Mode: python; py-indent-offset: 4; indent-tabs-mode: nil; coding: utf-8; -*-

# def options(opt):
#     pass

# def configure(conf):
#     conf.check_nonfatal(header_name='stdint.h', define_name='HAVE_STDINT_H')

def build(bld):
    module = bld.create_ns3_module('dcn', ['core', 'network', 'point-to-point', 'internet'])
    module.source = [
	'model/fivetuple.cc',
	'model/hash-function-impl.cc',
	'model/hash-routing.cc',
	#'model/md5.c',
	'model/hsieh.c',
	#'model/md5sum.cc',
        'model/qbb-net-device.cc',
        'helper/fat-tree-helper.cc',
        'helper/ipv4-hash-routing-helper.cc',
        'model/multi-priority-queue.cc',
	'model/mqq-net-device.cc',
        'model/priority-queue.cc',
        'model/priority-tag.cc',
        'model/order-tag.cc',
	#'model/simple-priority-ecn-queue.cc',
	'model/simple-dctcp-queue.cc',
	'model/dctcp-queue.cc',
        'model/shared-net-device.cc',
        ]

    headers = bld.new_task_gen(features=['ns3header'])
    headers.module = 'dcn'
    headers.source = [
	'model/fivetuple.h',
	'model/hash-function.h',
	'model/hash-function-impl.h',
	'model/hash-routing.h',
	#'model/md5.h',
	'model/hsieh.h',
	#'model/md5sum.h',
        'model/qbb-net-device.h',
        'helper/fat-tree-helper.h',
        'helper/ipv4-hash-routing-helper.h',
	'model/multi-priority-queue.h',
	'model/mqq-net-device.h',
        'model/priority-queue.h',
        'model/priority-tag.h',
        'model/order-tag.h',
        'model/simple-dctcp-queue.h',
        'model/dctcp-queue.h',
#	'model/simple-priority-ecn-queue.h',
        'model/shared-net-device.h',
        ]

    if bld.env.ENABLE_EXAMPLES:
        bld.add_subdirs('examples')

    # bld.ns3_python_bindings()

